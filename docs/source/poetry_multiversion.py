import asyncio
import os
import subprocess
from pathlib import Path
from typing import cast
from asyncio.subprocess import PIPE
from subprocess import CalledProcessError
from sphinx_polyversion.pyvenv import Poetry
from sphinx_polyversion.builder import BuildError
from typing_extensions import Self


# TODO: Ask if this part is syntactically correct
class ChatskyPoetry(Poetry):
    async def __aenter__(self) -> Self:
        """
        Set the poetry venv up.
        Also add sphinx-polyversion to each revision.

        Raises
        ------
        BuildError
            Running `poetry install` failed.

        """
        # Adding sphinx-polyversion to local dependencies
        print(os.getcwd())
        print(self.path)
        poetry_args = ["poetry", "add", "sphinx-polyversion", "--group", "docs"]
        poetry_subprocess = subprocess.Popen(poetry_args, cwd=self.path)
        poetry_subprocess.wait()

        # create venv and install deps
        self.logger.info("`poetry install`")

        cmd: list[str] = ["poetry", "install"]
        cmd += self.args

        env = os.environ.copy()
        env.pop("VIRTUAL_ENV", None)  # unset poetry env
        env["POETRY_VIRTUALENVS_IN_PROJECT"] = "False"
        venv_path = self.path / ".venv"
        i = 0
        while venv_path.exists():
            venv_path = self.path / f".venv-{i}"
            i += 1
        env["POETRY_VIRTUALENVS_PATH"] = str(venv_path)

        process = await asyncio.create_subprocess_exec(
            *cmd,
            cwd=self.path,
            env=env,
            stdout=PIPE,
            stderr=PIPE,
        )
        out, err = await process.communicate()
        out = out.decode(errors="ignore")
        err = err.decode(errors="ignore")

        self.logger.debug("Installation output:\n %s", out)
        if process.returncode != 0:
            self.logger.error("Installation error:\n %s", err)
            raise BuildError from CalledProcessError(
                cast(int, process.returncode), " ".join(cmd), out, err
            )

        # ---- locate venv
        # In the previous process poetry will have created or
        # ensured the existence of a venv in `venv_path` path folder.
        # However the venv itself constitutes a subdirectory with
        # an arbitrary name generated by poetry.
        # Thus we ask poetry to give as the name of the venv folder.
        cmd: list[str] = ["poetry", "env", "info", "--path"]
        process = await asyncio.create_subprocess_exec(
            *cmd, cwd=self.path, env=env, stdout=PIPE, stderr=PIPE
        )
        out, err = await process.communicate()
        out = out.decode().rstrip("\n")
        err = err.decode(errors="ignore")

        self.logger.debug("Venv location: %s", out)
        if process.returncode != 0:
            self.logger.error("Error locating venv:\n %s", err)
            raise BuildError from CalledProcessError(
                cast(int, process.returncode), " ".join(cmd), out, err
            )
        self.venv = Path(out)  # actual venv location

        return self

    """
    async def __aenter__(self):
        # Adding sphinx-polyversion to local dependencies
        poetry_args = ["poetry", "add", "sphinx-polyversion", "--group", "docs"]
        poetry_subprocess = subprocess.Popen(poetry_args, cwd=self.path)
        poetry_subprocess.wait()
        await super().__aenter__()
    """
